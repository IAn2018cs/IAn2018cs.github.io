<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[自学之路：初识HTTP——《图解HTTP》note1]]></title>
      <url>http://ian2018.cn/2017/03/01/%E8%87%AA%E5%AD%A6%E4%B9%8B%E8%B7%AF%EF%BC%9A%E5%88%9D%E8%AF%86HTTP/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近打算学习一些网络相关的知识，经别人推荐，说《图解HTTP》这本书不错，于是便买来打算学习一波。笔记之中有什么错误，还望指出^_^。</p>
<p>一般的网络协议相关的书籍，仅仅是其厚度就令人望而生畏；但这本书仅仅有二百五十多页，让人不那么抵触，而且内容图文并茂，也不是那么枯燥，让人有种想看下去的欲望。</p>
<p>好了，废话不多说了，在学习HTTP之前，先了解了一下HTTP的发展历史和一些网络基础。</p>
<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="HTTP，一个发育缓慢的孩子"><a href="#HTTP，一个发育缓慢的孩子" class="headerlink" title="HTTP，一个发育缓慢的孩子"></a>HTTP，一个发育缓慢的孩子</h1><h2 id="什么是-HTTP-？"><a href="#什么是-HTTP-？" class="headerlink" title="什么是 HTTP ？"></a>什么是 HTTP ？</h2><p>我们使用HTTP最多的时候，就是我们在浏览网页的时候。</p>
<p>当你在浏览器的地址栏中输入网址后，一回车就会呈现出你要搜寻的页面，那么这个过程是如何实现的呢？</p>
<p>其实是我们的浏览器会根据你输入的网址，去对应的服务器端获取到相应的资源，然后在将它显示出来。那么在这个过程中，肯定要遵守一个规则，这个规则就是HTTP协议。</p>
<p>HTTP（HyperText Transfer Protocol）,中文名字叫“超文本传输协议”。HTTP诞生于1990年，由CERN（欧洲核子研究组织）提出，目的是为解决文档传输难题，让远隔两地的研究者实现知识共享。</p>
<h2 id="Web技术飞速发展"><a href="#Web技术飞速发展" class="headerlink" title="Web技术飞速发展"></a>Web技术飞速发展</h2><p>1990年11月，CERN 研发出第一台Web服务器和Web浏览器；</p>
<p>1993年，HTML1.0在全世界范围流行；</p>
<p>1994年，网景通信公司发布了浏览器 Netscape Navigator 1.0；</p>
<p>1995年，微软公司发布了浏览器 Internet Explorer 1.0 和 2.0，浏览器大战一触即发；</p>
<p>随后 Web服务器标准之一的 Apache 以 Apache 0.2 的姿态出现在世人面前，HTML 也发布了 2.0 版本。</p>
<p>随着浏览器大战愈演愈烈，浏览器公司不顾Web标准化，屡次新增功能却没有对应的说明文档，而且还对各自的HTML进行了扩展，导致前端工程师开发时，必须考虑兼容他们公司的浏览器。</p>
<p>2000年左右，随着网景通信公司的衰落，浏览器大战也告一段落。但在2004年，Mozilla基金会发布了 Firefox（火狐）浏览器，浏览器大战再次爆发。</p>
<p>Chrome、Opera、Safari 等浏览器也纷纷抢占市场。</p>
<h2 id="驻足不前的HTTP"><a href="#驻足不前的HTTP" class="headerlink" title="驻足不前的HTTP"></a>驻足不前的HTTP</h2><p>1990年 HTTP 问世，但那时没有作为正式的标准，所以称之为 HTTP/0.9;</p>
<p>1996年5月，HTTP 正式作为标准版公布，命名为 HTTP/1.0，该协议至今仍在广泛使用在服务端。</p>
<p>1997年1月发布 HTTP/1.1，这是目前主流的HTTP协议版本。</p>
<p>现在 HTTP/2.0 正在制定中，但要达到较高的使用覆盖率，恐怕还需要一段时间。</p>
<h1 id="网络基础-TCP-IP-协议族"><a href="#网络基础-TCP-IP-协议族" class="headerlink" title="网络基础 TCP/IP 协议族"></a>网络基础 TCP/IP 协议族</h1><p>现在通常使用的网络都是在 TCP/IP 协议族的基础上运作的，HTTP协议就属于它内部的一个子集。</p>
<p>计算机要和网络设备实现通信，双方就必须基于同样的方法，遵守各种协议，这样把互联网相关的协议集合起来，总称为 TCP/IP。</p>
<h2 id="TCP-IP-的分层管理"><a href="#TCP-IP-的分层管理" class="headerlink" title="TCP/IP 的分层管理"></a>TCP/IP 的分层管理</h2><p>为了能方便的修改和扩展，TCP/IP 采用分层的设计方式，这样当某个地方需要修改时，不需要更改整个协议，只需要修改相应的层即可。</p>
<p>TCP/IP 协议族分为四层：应用层，传输层，网络层，链路层。</p>
<h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>应用层决定了向用户提供服务时通信的活动，比如HTTP，FTP（文件传输协议），DNS（域名系统）等。</p>
<h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。在这层有两个性质不同的协议：TCP（传输控制协议），UDP（用户数据报协议）。</p>
<h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>又名网络互连层。该层用来处理网络上流动的数据包，规定通过怎样的路径把数据包传递给对方。IP协议等位于这一层。</p>
<h3 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h3><p>又名数据链路层，网络接口层。用于处理连接网络的硬件部分。</p>
<h2 id="TCP-IP-通信传输流"><a href="#TCP-IP-通信传输流" class="headerlink" title="TCP/IP 通信传输流"></a>TCP/IP 通信传输流</h2><p><img src="/img/png/bo4img/HTTP-TCP-IP-Stream-01.png" alt="图1"></p>
<p>如图1所示，利用 TCP/IP 进行网络通信时，发送端从应用层往下走，而接收端从链路层往上走。</p>
<p><img src="/img/png/bo4img/HTTP-TCP-IP-Stream-02.png" alt="图2"></p>
<p>如图2所示，发送端在传递数据时，每经过一层，就会被打上一个包含该层所属的首部信息；接收端在传递数据时，每经过一层，就会把对应的首部信息去掉。</p>
<h1 id="与-HTTP-密切相关的三个协议"><a href="#与-HTTP-密切相关的三个协议" class="headerlink" title="与 HTTP 密切相关的三个协议"></a>与 HTTP 密切相关的三个协议</h1><p>在 TCP/IP 协议族中，有三个和 HTTP 密不可分的协议，它们分别是 DNS服务、TCP协议 和 IP协议。</p>
<h2 id="负责域名解析的-DNS服务"><a href="#负责域名解析的-DNS服务" class="headerlink" title="负责域名解析的 DNS服务"></a>负责域名解析的 DNS服务</h2><p>DNS服务 和 HTTP协议 都位于应用层。DNS服务提供域名到IP地址的解析服务。</p>
<p>什么是域名？比如 www.baidu.com 就是域名。</p>
<p>什么是IP地址？比如 119.75.218.70。</p>
<p>域名和IP地址都是用来标记计算机的，有了它就可以找到网络上相应的计算机，举个不恰当的例子，好比你的名字就是域名，你的身份证号就是IP地址，当有人想找你的时候，即可以通过你的名字来找你，也可以通过你的身份证号来找你。</p>
<p>那么为什么会有两个东西来标记计算机呢？ 因为一个是给人看的，一个是为计算机看的。与IP地址的一组纯数字对比，用字母配合数字的表示形式更符合人类的记忆习惯；但计算机就不擅长处理字母了，它更擅长处理数字。</p>
<p>为了方便人们记忆，DNS服务应运而生，它提供通过域名查找IP地址，或逆向从IP地址反查域名的服务。</p>
<p><img src="/img/png/bo4img/DNS1.png" alt="图3"></p>
<h2 id="确保可靠性的-TCP协议"><a href="#确保可靠性的-TCP协议" class="headerlink" title="确保可靠性的 TCP协议"></a>确保可靠性的 TCP协议</h2><p>TCP协议位于传输层，提供可靠的字节流服务。</p>
<p>字节流服务是指，为了方便传输，将 大块数据 分割成以 报文段 为单位的 数据包 进行管理。</p>
<p>为了能够确保数据到达目标，TCP协议采用了 三次握手策略。</p>
<p><img src="/img/png/bo4img/TCP1.png" alt="图4"></p>
<p>如图4所示，握手过程中使用了TCP的标志：SYN（同步） 和 ACK（确认）。</p>
<p>第一次握手：发送端先发送一个带有SYN标志的数据包给对方。</p>
<p>第二次握手：接收端收到后回传一个带有SYN/ACK标志的数据包以表示已经收到信息。</p>
<p>第三次握手：发送端再回传一个带ACK标志的数据包，表示握手结束。</p>
<p>如果在握手过程中的任何一个阶段中断，发送端会再次以相同的顺序发送数据包。</p>
<p>举个不恰当的例子，古时候有甲、乙、丙三个国家打仗，这时候甲想联合乙，一起攻打丙。</p>
<p>一：但甲不知道乙愿不愿意，那时候没有微信，扫个码加个好友就能聊天，所以只能靠飞鸽传书。于是甲就写了封信给乙。但甲不知道乙有没有收到信，也不敢去贸然攻打丙，就等着乙的回信。</p>
<p>二：这时候乙收到了信，他也想和甲一起攻打丙，于是乙也写了封信给甲，告诉他我收到你的信了，同意去攻打丙。但这时候乙也不敢轻举妄动，他不知道甲有没有收到信，万一甲没收到信，就光我自己上，那就吃亏了，所以乙也等着甲的回信。</p>
<p>三：甲终于等到了乙的回信，既然同意一起攻打丙了，那么咱们就定个日子，什么时候去打丙吧，于是甲又给乙写了封信。</p>
<p>乙收到了甲的信，日子都定下了，咱们就一起干吧。于是甲和乙这次敢出兵攻打丙。</p>
<p>如果有一方没有收到回信，肯定会再从头来一遍。</p>
<h2 id="负责传输的-IP协议"><a href="#负责传输的-IP协议" class="headerlink" title="负责传输的 IP协议"></a>负责传输的 IP协议</h2><p>IP协议位于网络层，它的作用是把各种数据包传递给对方。为了能传递到对方，就必须满足各类条件，其中最重要的两个是 IP地址 和 MAC地址。</p>
<p>IP地址指明了节点被分配到的地址，MAC地址指网卡所属的固定地址。IP地址可以变换，但MAC地址基本上不会改变。</p>
<p>一般发送数据包不会直接发送的对方那里，而是经过多台计算机和网络设备中转，才能发送带对方那里。在中转时，会利用下一站中转设备的 MAC地址 来搜寻下一个中转目标。这里会采用 ARP协议，一种以解析地址的协议，可以根据通信方的IP地址就可以反查出对应的MAC地址。</p>
<p>利用 IP协议 传输数据包，就好比是快递公司送货一样，一般都会从一个转运中心到另一个转运中心，直到可以送到你手中为止。</p>
<p><img src="/img/png/bo4img/IP1.png" alt="图5"></p>
<h2 id="利用HTTP协议、IP协议、TCP协议和DNS服务来请求一个网页的过程图解"><a href="#利用HTTP协议、IP协议、TCP协议和DNS服务来请求一个网页的过程图解" class="headerlink" title="利用HTTP协议、IP协议、TCP协议和DNS服务来请求一个网页的过程图解"></a>利用HTTP协议、IP协议、TCP协议和DNS服务来请求一个网页的过程图解</h2><p>通过下面这个图来了解一下在通信过程中，这些协议都发挥了哪些作用。</p>
<p><img src="/img/png/bo4img/HTTP-TCP-IP-Stream-03.png" alt="图6"></p>
<h1 id="URI-和-URL"><a href="#URI-和-URL" class="headerlink" title="URI 和 URL"></a>URI 和 URL</h1><h2 id="URI-和-URL-简介"><a href="#URI-和-URL-简介" class="headerlink" title="URI 和 URL 简介"></a>URI 和 URL 简介</h2><p>URI（Uniform Resource Identifier，统一资源标识符），用字符串标识某一互联网资源。</p>
<p>URL（Uniform Resource Locator，统一资源定位符），表示互联网上资源所处的位置。</p>
<p>可见，URL 是 URI 的子集。</p>
<p><img src="/img/png/bo4img/URI1.png" alt="图7"></p>
<p>如图7所示，列举了几种 URI 例子</p>
<h2 id="URI-格式"><a href="#URI-格式" class="headerlink" title="URI 格式"></a>URI 格式</h2><p><img src="/img/png/bo4img/URI2.png" alt="图8"></p>
<h3 id="协议名称"><a href="#协议名称" class="headerlink" title="协议名称"></a>协议名称</h3><p>指访问资源时使用哪种协议类型。</p>
<h3 id="登录信息认证"><a href="#登录信息认证" class="headerlink" title="登录信息认证"></a>登录信息认证</h3><p>此为可选项，指定用户名和密码作为从服务器获取资源的必要登录信息。</p>
<h3 id="服务器地址"><a href="#服务器地址" class="headerlink" title="服务器地址"></a>服务器地址</h3><p>必须指定，地址可以是域名，也可以是IP地址。</p>
<h3 id="服务器端口号"><a href="#服务器端口号" class="headerlink" title="服务器端口号"></a>服务器端口号</h3><p>可选项，指定服务器网络连接的端口号，不指定使用默认的端口号。</p>
<h3 id="带层次的文件路径"><a href="#带层次的文件路径" class="headerlink" title="带层次的文件路径"></a>带层次的文件路径</h3><p>指定服务器上资源的文件路径位置。</p>
<h3 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h3><p>可选项，针对已指定的文件路径内的资源，可以使用查询字符串传入任意参数。</p>
<h3 id="片段标识符"><a href="#片段标识符" class="headerlink" title="片段标识符"></a>片段标识符</h3><p>可选项，可以标记出已获取资源中的子资源。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>好了，今天大概了解了一下 HTTP 的历史，以及一些网络基础。如果有什么不正确的地方，还请多多指教。</p>
<p>今天就先到这里吧。以后什么时候再见还不一定，因为有时候懒癌发作了很难好过来<img src="/img/png/bo4img/images.png" alt=""></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自学之路：手机卫士]]></title>
      <url>http://ian2018.cn/2016/09/03/%E8%87%AA%E5%AD%A6%E4%B9%8B%E8%B7%AF%EF%BC%9A%E6%89%8B%E6%9C%BA%E5%8D%AB%E5%A3%AB/</url>
      <content type="html"><![CDATA[<h1 id="在自学时遇到的一些困难"><a href="#在自学时遇到的一些困难" class="headerlink" title="在自学时遇到的一些困难"></a>在自学时遇到的一些困难</h1><p>在自学中遇到的一些小问题，解决方法仅供参考，由于作者目前还处于小白阶段，有错误的地方还请指出(⊙o⊙)</p>
<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">


<hr>
<h2 id="状态栏颜色"><a href="#状态栏颜色" class="headerlink" title="状态栏颜色"></a>状态栏颜色</h2><p>由于手机卫士这个项目是用eclipse写的，编译版本也选择的是4.4的，所以在界面上不是很好看，没有用 Material Design 的风格。</p>
<p>这里我就想把状态栏的颜色换一换，达到沉浸式的效果。于是便在网上搜索一些资料，经过几次实验，找到了一个比较合适的方法。</p>
<p>原文链接：<a href="http://blog.csdn.net/loongggdroid/article/details/47417233" target="_blank" rel="external">http://blog.csdn.net/loongggdroid/article/details/47417233</a></p>
<p>实现方法也比较简单</p>
<ol>
<li>首先到 <a href="https://github.com/hexiaochun/SystemBarTint" target="_blank" rel="external">这里</a> 下载所需要的Java文件，在   SystemBarTint/library/src/com/readystatesoftware/systembartint/ 目录下，找到名字叫        <code>SystemBarTintManager.java</code> 的文件，拷贝到自己的工程中。</li>
<li>在要使用沉浸式状态栏的布局文件的根布局中添加一个属性  <code>android:fitsSystemWindows=&quot;true&quot;</code> </li>
<li><p>在 Activity 中使用，在 onCreate 方法里添加如下代码：</p>
<pre><code>requestWindowFeature(Window.FEATURE_NO_TITLE);
if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {
    setTranslucentStatus(true);
    SystemBarTintManager tintManager = new SystemBarTintManager(this);
    tintManager.setStatusBarTintEnabled(true);
    tintManager.setStatusBarTintResource(R.color.top_bg_color);// 通知栏所需颜色
}
setContentView(R.layout.activity_main);
</code></pre><p> 再在Activity中添加一个方法：</p>
<pre><code>@TargetApi(19)
public void setTranslucentStatus(boolean on) {
    Window win = getWindow();
    WindowManager.LayoutParams winParams = win.getAttributes();
    final int bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;
    if (on) {
        winParams.flags |= bits;
    } else {
        winParams.flags &amp;= ~bits;
    }
    win.setAttributes(winParams);
}
</code></pre></li>
</ol>
<p>不过这个方法还有一个缺点，由于自定义了状态栏，在设置来电归属地位置的时候，读取的屏幕位置会和实际位置有偏差，导致每次进入设置，提示框的位置都会向下移动。</p>
<hr>
<h2 id="短信备份中兼容特殊字符"><a href="#短信备份中兼容特殊字符" class="headerlink" title="短信备份中兼容特殊字符"></a>短信备份中兼容特殊字符</h2><p>短信备份是通过xml文件存储的，所以短信中可能存在一些xml文件中的非法字符，这样就会出现异常，使备份失败。</p>
<p>解决方法就是过滤短信中的非法字符，可以通过以下方法过滤：</p>
<pre><code>public static String xmlChar(String str){
    StringBuffer sb = new StringBuffer();
    char c;
    if(str==null || str.equals(&quot;&quot;)){
        return &quot;&quot;;
    }
    for(int i=0; i&lt;str.length(); i++){
        c = str.charAt(i);
        if((c==0x9) || (c==0xA) || (c==0xD) || ((c&gt;=0x20)&amp;&amp;(c&lt;=0xD7FF)) || ((c&gt;=0xE000)&amp;&amp;(c&lt;=0xFFFD)) || (c&gt;=0x10000)&amp;&amp;(c&lt;=0x10FFFF)){
            sb.append(c);
        }
    }
    return sb.toString();
}
</code></pre><hr>
<h2 id="程序锁"><a href="#程序锁" class="headerlink" title="程序锁"></a>程序锁</h2><p>程序锁其实就是一直监听手机应用的启动情况，当有加锁应用启动时，就会启动自己设置的加锁界面。</p>
<p>视频中是通过 ActivityManager 的 getRunningTasks 方法获得当前运行的任务栈集合，得到集合中第一个任务栈信息后，获得当前任务栈顶的activity对应应用的包名 <code>runningTaskInfo.topActivity.getPackageName();</code> 再去和加锁应用的包名集合比较，如果存在就启动加锁界面(启动方式为FLAG_ACTIVITY_NEW_TASK，清单文件模式为singleInstance)。</p>
<p>不过这种方法在有些手机上就不行，因为国内有些手机厂商的 rom 会就自己的启动器(比如OPPO)，就是应用程序都是通过一个启动器应用来启动的，再通过上面那种方法获得的运行任务栈顶activity对应的包名就会只有启动器的包名，这样就不能判断到底是哪个应用启动了。</p>
<p>这里我就通过另一种方法，解决了这个问题。不去获取运行的任务栈，而是获取运行的应用进程 <code>getRunningAppProcesses</code> ，再通过应用信息获取应用包名，这样就可以判断是哪个应用启动了。</p>
<hr>
<h2 id="归属地查询"><a href="#归属地查询" class="headerlink" title="归属地查询"></a>归属地查询</h2><p>归属地查询这块，我加了聚合数据的内容。查询先是通过视频的方法，查本地数据库，当数据库查不到时，再调用聚合数据查询。</p>
<p>不过在调用聚合数据查询时，不知道是不是网络查询的问题，总要点两下查询，才能显示结果。</p>
<hr>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>视频中的进程管理，直接写在 onCreate 方法里，这样UI就只能是固定的，当把程序挂起，有开启了另一个应用，这时进程管理中的UI却没有改变，所以为了能是UI随着更新，我把初始化UI的逻辑放在了 onResume 方法里，这样就能随时更新UI了。</p>
<p>不过这样好像更消耗手机内存，如果你只是将应用挂起，没有开新的应用，这时候UI也会重新加载。</p>
<hr>
<h2 id="缓存清理界面"><a href="#缓存清理界面" class="headerlink" title="缓存清理界面"></a>缓存清理界面</h2><p>这里的界面我没有安装视频中的做，而是和手机杀毒的界面相似。当扫描完后，替换扫描的图片，并设置点击事件，点击图片时，又更换另一组图片，并设置动画，达到清理的效果。</p>
<p><img src="/img/png/bo3img/screenshot1.png" alt=""><br><img src="/img/png/bo3img/screenshot2.png" alt=""></p>
<hr>
<h3 id="学完手机卫士，把Android的基础巩固了一下，后面的路还很长，需要继续努力。"><a href="#学完手机卫士，把Android的基础巩固了一下，后面的路还很长，需要继续努力。" class="headerlink" title="学完手机卫士，把Android的基础巩固了一下，后面的路还很长，需要继续努力。"></a>学完手机卫士，把Android的基础巩固了一下，后面的路还很长，需要继续努力。</h3></the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[探索：使用Hexo搭建博客(Windows用户)]]></title>
      <url>http://ian2018.cn/2016/09/01/%E5%BB%BA%E7%AB%99%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我是在一个安卓开发群里了解到这种搭建博客的方法，群友发了两个链接，链接上的教程说是五分钟搭建自己的博客，可我经过了一个多小时的探索才完成了这个博客。自己又搜索些资料，改了改主题，才最终弄成现在这个样子。</p>
<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>先贴出群友发的两个链接：</p>
<blockquote>
<p><a href="http://www.jianshu.com/p/4eaddcbe4d12" title="五分钟搭建博客的链接" target="_blank" rel="external">http://www.jianshu.com/p/4eaddcbe4d12</a></p>
<p><a href="http://opiece.me/2015/04/09/hexo-guide/" title="使用Hexo搭建个人博客(基于hexo3.0)" target="_blank" rel="external">http://opiece.me/2015/04/09/hexo-guide/</a></p>
</blockquote>
<hr>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="搭建前的准备"><a href="#搭建前的准备" class="headerlink" title="搭建前的准备"></a>搭建前的准备</h2><ul>
<li><p>要有一个github账号 ( 没有的可以先去注册一下 → <a href="https://github.com/" target="_blank" rel="external">github</a> )</p>
</li>
<li><p>安装 <a href="http://pan.baidu.com/s/1cwumrc" target="_blank" rel="external">Git</a> (  下载完后一直下一步就可以，记下安装目录，方便后面使用 )</p>
</li>
<li><p>安装 <a href="https://nodejs.org/en/" target="_blank" rel="external">Nodejs</a> (下载完后也是一直下一步即可)</p>
</li>
<li><p>安装hexo</p>
<p>  这里就需要Git的安装目录了，在这个目录下找到一个叫Git Bash.vbs的文件，打开如下</p>
<p>  <img src="/img/png/bo2img/git.jpg" alt=""></p>
<p>  然后输入 <code>npm install hexo-cli -g</code> 按回车执行，完成</p>
</li>
</ul>
<hr>
<h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="在github上创建仓库"><a href="#在github上创建仓库" class="headerlink" title="在github上创建仓库"></a>在github上创建仓库</h3><p>进入github首页，在上面的标题栏上点一个加号形状的按钮，弹出三个选项，选第一个New repository</p>
<p><img src="/img/png/bo2img/chuangjian1.png" alt=""></p>
<p>然后出现下面这个界面</p>
<p><img src="/img/png/bo2img/chuanjian2.png" alt=""></p>
<p>仓库名格式必须是 <code>xxx.github.io</code> ，这就是将来你访问你博客的域名，其中的xxx是自己github的用户名。</p>
<p>其他保持默认即可，然后点击创建，完成此步骤。</p>
<h3 id="用Hexo初始化博客"><a href="#用Hexo初始化博客" class="headerlink" title="用Hexo初始化博客"></a>用Hexo初始化博客</h3><p>还是找到Git的安装目录，在这个目录下找到 <code>Git Bash.vbs</code> 文件，打开</p>
<p>输入<code>hexo init xxx.github.io</code></p>
<p>执行成功后，会在Git的安装目录下创建出一个名为 <code>xxx.github.io</code> 的文件夹。</p>
<h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>找到刚刚创建的 <code>xxx.github.io</code> 的文件夹，打开名字叫 <code>_config.yml</code> 的文件，找到以下几个关键字，对照着进行修改</p>
<pre><code>title:    xxx        //这里写你博客的名字
subtitle: xxx     //个性签名
description: xxx    //博客描述     
author: xxx    //你的名字(昵称)
language: zh-Hans        //语言 简体中文

theme: next       //主题的名称，后面我们会去配置

deploy:
    type: git    //使用Git 发布
    repo: https://github.com/你github的用户名/xxx.github.io.git    // 刚创建的Github仓库(可以到github上复制刚创建仓库的链接)
</code></pre><p><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">查看Hexo更多详细配置信息</a></p>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>其实Hexo提供了好多高逼格的主题，自己可以在<a href="https://hexo.io/themes/" target="_blank" rel="external">这里</a>挑选一个喜欢的</p>
<p><img src="/img/png/bo2img/zhuti1.png" alt=""></p>
<p>下载完后解压，把文件夹名字改成你下载主题的名字 ( 全是小写字母 ) 例：again，然后复制到刚创建的文件夹 <code>xxx.github.io/themes</code> 目录下</p>
<p>首先到 <code>xxx.github.io</code> 文件夹下的 <code>_config.yml</code> 文件，现在可以设置上一步基础配置里的主题了</p>
<p>找到 theme 节点修改</p>
<pre><code>theme: again    //主题的名字，就是我们拷贝到 xxx.github.io/themes  目录下那个文件夹的名字
</code></pre><p>接下来就是个性化主题了</p>
<p>来到 <code>xxx.github.io/themes/你主题的名字</code> 文件夹下 打开 <code>_config.yml</code> 修改相应节点。</p>
<p>一般主题的配置，在下载下的主题文件夹中会有一个叫 <code>README.md</code> 的文件，这里会有相应配置信息。</p>
<h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><p>所有基础框架都已经创建完成，接下来可以开始写你的第一篇文章了</p>
<p>在 <code>xxx.github.io/source/_posts</code> 文件夹下</p>
<p>新建一个名为 <code>xxx.md</code> 的文件，用 <a href="http://pan.baidu.com/s/1eRTLOe2" target="_blank" rel="external">Markdown</a> 书写你的大作吧。</p>
<hr>
<h2 id="测试和发布"><a href="#测试和发布" class="headerlink" title="测试和发布"></a>测试和发布</h2><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>继续打开 Git 安装目录下的 <code>Git Bash.vbs</code> 文件，输入</p>
<pre><code>cd xxx.github.io 

hexo s
</code></pre><p>等待一会，出现以下内容</p>
<p><img src="/img/png/bo2img/ceshi.png" alt=""></p>
<p>就可以在浏览器中输入 <code>https://localhost:4000</code> 访问了 ( 其中 localhost 可以替换成本机 IP )。</p>
<h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>打开 Git 安装目录下的 <code>Git Bash.vbs</code> 文件，输入</p>
<pre><code>cd xxx.github.io

hexo g &amp;&amp; hexo d
</code></pre><p>等待一会，就会出现一堆东西</p>
<p><img src="/img/png/bo2img/shangchuan1.png" alt=""></p>
<p>然后会让你输入 github 的 用户名 和 密码</p>
<p><img src="/img/png/bo2img/shangchuan2.png" alt=""></p>
<p>最后等待完成就可以了</p>
<p><img src="/img/png/bo2img/shangchuan3.png" alt=""></p>
<h3 id="去欣赏一下自己搭建的博客"><a href="#去欣赏一下自己搭建的博客" class="headerlink" title="去欣赏一下自己搭建的博客"></a>去欣赏一下自己搭建的博客</h3><p>打开浏览器，输入 <code>xxx.github.io</code> ,就可以访问到自己的博客啦</p>
<p><img src="/img/png/bo2img/wancheng.png" alt=""></p>
<hr>
<h1 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h1><p>这是我结合群友发的两篇教程和自己的一点探索完成的，在内容和格式上参考了一些两位前辈的 <a href="http://opiece.me/" target="_blank" rel="external">Chillax</a>  和 <a href="http://www.jianshu.com/users/965ae4feb718/latest_articles" target="_blank" rel="external">简书作者：dimsky</a></p>
<hr>
<h4 id="花了两个多小时，终于完成了这篇文章……"><a href="#花了两个多小时，终于完成了这篇文章……" class="headerlink" title="花了两个多小时，终于完成了这篇文章……"></a>花了两个多小时，终于完成了这篇文章……</h4></the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://ian2018.cn/2016/08/31/hello-world/</url>
      <content type="html"><![CDATA[<p>第一次搭建自己的博客</p>
<h1 id="有点激动啊"><a href="#有点激动啊" class="headerlink" title="有点激动啊"></a>有点激动啊</h1><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p><img src="/img/ian.png" alt=""></p>
</the>]]></content>
    </entry>
    
  
  
</search>
