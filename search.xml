<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[自学之路：手机卫士]]></title>
      <url>http://ian2018.cn/2016/09/03/%E8%87%AA%E5%AD%A6%E4%B9%8B%E8%B7%AF%EF%BC%9A%E6%89%8B%E6%9C%BA%E5%8D%AB%E5%A3%AB/</url>
      <content type="html"><![CDATA[<h1 id="在自学时遇到的一些困难"><a href="#在自学时遇到的一些困难" class="headerlink" title="在自学时遇到的一些困难"></a>在自学时遇到的一些困难</h1><p>在自学中遇到的一些小问题，解决方法仅供参考，由于作者目前还处于小白阶段，有错误的地方还请指出(⊙o⊙)</p>
<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">


<hr>
<h2 id="状态栏颜色"><a href="#状态栏颜色" class="headerlink" title="状态栏颜色"></a>状态栏颜色</h2><p>由于手机卫士这个项目是用eclipse写的，编译版本也选择的是4.4的，所以在界面上不是很好看，没有用 Material Design 的风格。</p>
<p>这里我就想把状态栏的颜色换一换，达到沉浸式的效果。于是便在网上搜索一些资料，经过几次实验，找到了一个比较合适的方法。</p>
<p>原文链接：<a href="http://blog.csdn.net/loongggdroid/article/details/47417233" target="_blank" rel="external">http://blog.csdn.net/loongggdroid/article/details/47417233</a></p>
<p>实现方法也比较简单</p>
<ol>
<li>首先到 <a href="https://github.com/hexiaochun/SystemBarTint" target="_blank" rel="external">这里</a> 下载所需要的Java文件，在   SystemBarTint/library/src/com/readystatesoftware/systembartint/ 目录下，找到名字叫        <code>SystemBarTintManager.java</code> 的文件，拷贝到自己的工程中。</li>
<li>在要使用沉浸式状态栏的布局文件的根布局中添加一个属性  <code>android:fitsSystemWindows=&quot;true&quot;</code> </li>
<li><p>在 Activity 中使用，在 onCreate 方法里添加如下代码：</p>
<pre><code>requestWindowFeature(Window.FEATURE_NO_TITLE);
if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {
    setTranslucentStatus(true);
    SystemBarTintManager tintManager = new SystemBarTintManager(this);
    tintManager.setStatusBarTintEnabled(true);
    tintManager.setStatusBarTintResource(R.color.top_bg_color);// 通知栏所需颜色
}
setContentView(R.layout.activity_main);
</code></pre><p> 再在Activity中添加一个方法：</p>
<pre><code>@TargetApi(19)
public void setTranslucentStatus(boolean on) {
    Window win = getWindow();
    WindowManager.LayoutParams winParams = win.getAttributes();
    final int bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;
    if (on) {
        winParams.flags |= bits;
    } else {
        winParams.flags &amp;= ~bits;
    }
    win.setAttributes(winParams);
}
</code></pre></li>
</ol>
<p>不过这个方法还有一个缺点，由于自定义了状态栏，在设置来电归属地位置的时候，读取的屏幕位置会和实际位置有偏差，导致每次进入设置，提示框的位置都会向下移动。</p>
<hr>
<h2 id="短信备份中兼容特殊字符"><a href="#短信备份中兼容特殊字符" class="headerlink" title="短信备份中兼容特殊字符"></a>短信备份中兼容特殊字符</h2><p>短信备份是通过xml文件存储的，所以短信中可能存在一些xml文件中的非法字符，这样就会出现异常，使备份失败。</p>
<p>解决方法就是过滤短信中的非法字符，可以通过以下方法过滤：</p>
<pre><code>public static String xmlChar(String str){
    StringBuffer sb = new StringBuffer();
    char c;
    if(str==null || str.equals(&quot;&quot;)){
        return &quot;&quot;;
    }
    for(int i=0; i&lt;str.length(); i++){
        c = str.charAt(i);
        if((c==0x9) || (c==0xA) || (c==0xD) || ((c&gt;=0x20)&amp;&amp;(c&lt;=0xD7FF)) || ((c&gt;=0xE000)&amp;&amp;(c&lt;=0xFFFD)) || (c&gt;=0x10000)&amp;&amp;(c&lt;=0x10FFFF)){
            sb.append(c);
        }
    }
    return sb.toString();
}
</code></pre><hr>
<h2 id="程序锁"><a href="#程序锁" class="headerlink" title="程序锁"></a>程序锁</h2><p>程序锁其实就是一直监听手机应用的启动情况，当有加锁应用启动时，就会启动自己设置的加锁界面。</p>
<p>视频中是通过 ActivityManager 的 getRunningTasks 方法获得当前运行的任务栈集合，得到集合中第一个任务栈信息后，获得当前任务栈顶的activity对应应用的包名 <code>runningTaskInfo.topActivity.getPackageName();</code> 再去和加锁应用的包名集合比较，如果存在就启动加锁界面(启动方式为FLAG_ACTIVITY_NEW_TASK，清单文件模式为singleInstance)。</p>
<p>不过这种方法在有些手机上就不行，因为国内有些手机厂商的 rom 会就自己的启动器(比如OPPO)，就是应用程序都是通过一个启动器应用来启动的，再通过上面那种方法获得的运行任务栈顶activity对应的包名就会只有启动器的包名，这样就不能判断到底是哪个应用启动了。</p>
<p>这里我就通过另一种方法，解决了这个问题。不去获取运行的任务栈，而是获取运行的应用进程 <code>getRunningAppProcesses</code> ，再通过应用信息获取应用包名，这样就可以判断是哪个应用启动了。</p>
<hr>
<h2 id="归属地查询"><a href="#归属地查询" class="headerlink" title="归属地查询"></a>归属地查询</h2><p>归属地查询这块，我加了聚合数据的内容。查询先是通过视频的方法，查本地数据库，当数据库查不到时，再调用聚合数据查询。</p>
<p>不过在调用聚合数据查询时，不知道是不是网络查询的问题，总要点两下查询，才能显示结果。</p>
<hr>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>视频中的进程管理，直接写在 onCreate 方法里，这样UI就只能是固定的，当把程序挂起，有开启了另一个应用，这时进程管理中的UI却没有改变，所以为了能是UI随着更新，我把初始化UI的逻辑放在了 onResume 方法里，这样就能随时更新UI了。</p>
<p>不过这样好像更消耗手机内存，如果你只是将应用挂起，没有开新的应用，这时候UI也会重新加载。</p>
<hr>
<h2 id="缓存清理界面"><a href="#缓存清理界面" class="headerlink" title="缓存清理界面"></a>缓存清理界面</h2><p>这里的界面我没有安装视频中的做，而是和手机杀毒的界面相似。当扫描完后，替换扫描的图片，并设置点击事件，点击图片时，又更换另一组图片，并设置动画，达到清理的效果。</p>
<p><img src="/img/png/bo3img/screenshot1.png" alt=""><br><img src="/img/png/bo3img/screenshot2.png" alt=""></p>
<hr>
<h3 id="学完手机卫士，把Android的基础巩固了一下，后面的路还很长，需要继续努力。"><a href="#学完手机卫士，把Android的基础巩固了一下，后面的路还很长，需要继续努力。" class="headerlink" title="学完手机卫士，把Android的基础巩固了一下，后面的路还很长，需要继续努力。"></a>学完手机卫士，把Android的基础巩固了一下，后面的路还很长，需要继续努力。</h3></the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[探索：使用Hexo搭建博客(Windows用户)]]></title>
      <url>http://ian2018.cn/2016/09/01/%E5%BB%BA%E7%AB%99%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我是在一个安卓开发群里了解到这种搭建博客的方法，群友发了两个链接，链接上的教程说是五分钟搭建自己的博客，可我经过了一个多小时的探索才完成了这个博客。自己又搜索些资料，改了改主题，才最终弄成现在这个样子。</p>
<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>先贴出群友发的两个链接：</p>
<blockquote>
<p><a href="http://www.jianshu.com/p/4eaddcbe4d12" title="五分钟搭建博客的链接" target="_blank" rel="external">http://www.jianshu.com/p/4eaddcbe4d12</a></p>
<p><a href="http://opiece.me/2015/04/09/hexo-guide/" title="使用Hexo搭建个人博客(基于hexo3.0)" target="_blank" rel="external">http://opiece.me/2015/04/09/hexo-guide/</a></p>
</blockquote>
<hr>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="搭建前的准备"><a href="#搭建前的准备" class="headerlink" title="搭建前的准备"></a>搭建前的准备</h2><ul>
<li><p>要有一个github账号 ( 没有的可以先去注册一下 → <a href="https://github.com/" target="_blank" rel="external">github</a> )</p>
</li>
<li><p>安装 <a href="http://pan.baidu.com/s/1cwumrc" target="_blank" rel="external">Git</a> (  下载完后一直下一步就可以，记下安装目录，方便后面使用 )</p>
</li>
<li><p>安装 <a href="https://nodejs.org/en/" target="_blank" rel="external">Nodejs</a> (下载完后也是一直下一步即可)</p>
</li>
<li><p>安装hexo</p>
<p>  这里就需要Git的安装目录了，在这个目录下找到一个叫Git Bash.vbs的文件，打开如下</p>
<p>  <img src="/img/png/bo2img/git.jpg" alt=""></p>
<p>  然后输入 <code>npm install hexo-cli -g</code> 按回车执行，完成</p>
</li>
</ul>
<hr>
<h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="在github上创建仓库"><a href="#在github上创建仓库" class="headerlink" title="在github上创建仓库"></a>在github上创建仓库</h3><p>进入github首页，在上面的标题栏上点一个加号形状的按钮，弹出三个选项，选第一个New repository</p>
<p><img src="/img/png/bo2img/chuangjian1.png" alt=""></p>
<p>然后出现下面这个界面</p>
<p><img src="/img/png/bo2img/chuanjian2.png" alt=""></p>
<p>仓库名格式必须是 <code>xxx.github.io</code> ，这就是将来你访问你博客的域名，其中的xxx是自己github的用户名。</p>
<p>其他保持默认即可，然后点击创建，完成此步骤。</p>
<h3 id="用Hexo初始化博客"><a href="#用Hexo初始化博客" class="headerlink" title="用Hexo初始化博客"></a>用Hexo初始化博客</h3><p>还是找到Git的安装目录，在这个目录下找到 <code>Git Bash.vbs</code> 文件，打开</p>
<p>输入<code>hexo init xxx.github.io</code></p>
<p>执行成功后，会在Git的安装目录下创建出一个名为 <code>xxx.github.io</code> 的文件夹。</p>
<h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>找到刚刚创建的 <code>xxx.github.io</code> 的文件夹，打开名字叫 <code>_config.yml</code> 的文件，找到以下几个关键字，对照着进行修改</p>
<pre><code>title:    xxx        //这里写你博客的名字
subtitle: xxx     //个性签名
description: xxx    //博客描述     
author: xxx    //你的名字(昵称)
language: zh-Hans        //语言 简体中文

theme: next       //主题的名称，后面我们会去配置

deploy:
    type: git    //使用Git 发布
    repo: https://github.com/你github的用户名/xxx.github.io.git    // 刚创建的Github仓库(可以到github上复制刚创建仓库的链接)
</code></pre><p><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">查看Hexo更多详细配置信息</a></p>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>其实Hexo提供了好多高逼格的主题，自己可以在<a href="https://hexo.io/themes/" target="_blank" rel="external">这里</a>挑选一个喜欢的</p>
<p><img src="/img/png/bo2img/zhuti1.png" alt=""></p>
<p>下载完后解压，把文件夹名字改成你下载主题的名字 ( 全是小写字母 ) 例：again，然后复制到刚创建的文件夹 <code>xxx.github.io/themes</code> 目录下</p>
<p>首先到 <code>xxx.github.io</code> 文件夹下的 <code>_config.yml</code> 文件，现在可以设置上一步基础配置里的主题了</p>
<p>找到 theme 节点修改</p>
<pre><code>theme: again    //主题的名字，就是我们拷贝到 xxx.github.io/themes  目录下那个文件夹的名字
</code></pre><p>接下来就是个性化主题了</p>
<p>来到 <code>xxx.github.io/themes/你主题的名字</code> 文件夹下 打开 <code>_config.yml</code> 修改相应节点。</p>
<p>一般主题的配置，在下载下的主题文件夹中会有一个叫 <code>README.md</code> 的文件，这里会有相应配置信息。</p>
<h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><p>所有基础框架都已经创建完成，接下来可以开始写你的第一篇文章了</p>
<p>在 <code>xxx.github.io/source/_posts</code> 文件夹下</p>
<p>新建一个名为 <code>xxx.md</code> 的文件，用 <a href="http://pan.baidu.com/s/1eRTLOe2" target="_blank" rel="external">Markdown</a> 书写你的大作吧。</p>
<hr>
<h2 id="测试和发布"><a href="#测试和发布" class="headerlink" title="测试和发布"></a>测试和发布</h2><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>继续打开 Git 安装目录下的 <code>Git Bash.vbs</code> 文件，输入</p>
<pre><code>cd xxx.github.io 

hexo s
</code></pre><p>等待一会，出现以下内容</p>
<p><img src="/img/png/bo2img/ceshi.png" alt=""></p>
<p>就可以在浏览器中输入 <code>https://localhost:4000</code> 访问了 ( 其中 localhost 可以替换成本机 IP )。</p>
<h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>打开 Git 安装目录下的 <code>Git Bash.vbs</code> 文件，输入</p>
<pre><code>cd xxx.github.io

hexo g &amp;&amp; hexo d
</code></pre><p>等待一会，就会出现一堆东西</p>
<p><img src="/img/png/bo2img/shangchuan1.png" alt=""></p>
<p>然后会让你输入 github 的 用户名 和 密码</p>
<p><img src="/img/png/bo2img/shangchuan2.png" alt=""></p>
<p>最后等待完成就可以了</p>
<p><img src="/img/png/bo2img/shangchuan3.png" alt=""></p>
<h3 id="去欣赏一下自己搭建的博客"><a href="#去欣赏一下自己搭建的博客" class="headerlink" title="去欣赏一下自己搭建的博客"></a>去欣赏一下自己搭建的博客</h3><p>打开浏览器，输入 <code>xxx.github.io</code> ,就可以访问到自己的博客啦</p>
<p><img src="/img/png/bo2img/wancheng.png" alt=""></p>
<hr>
<h1 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h1><p>这是我结合群友发的两篇教程和自己的一点探索完成的，在内容和格式上参考了一些两位前辈的 <a href="http://opiece.me/" target="_blank" rel="external">Chillax</a>  和 <a href="http://www.jianshu.com/users/965ae4feb718/latest_articles" target="_blank" rel="external">简书作者：dimsky</a></p>
<hr>
<h4 id="花了两个多小时，终于完成了这篇文章……"><a href="#花了两个多小时，终于完成了这篇文章……" class="headerlink" title="花了两个多小时，终于完成了这篇文章……"></a>花了两个多小时，终于完成了这篇文章……</h4></the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://ian2018.cn/2016/08/31/hello-world/</url>
      <content type="html"><![CDATA[<p>第一次搭建自己的博客</p>
<h1 id="有点激动啊"><a href="#有点激动啊" class="headerlink" title="有点激动啊"></a>有点激动啊</h1><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p><img src="/img/ian.png" alt=""></p>
</the>]]></content>
    </entry>
    
  
  
</search>
